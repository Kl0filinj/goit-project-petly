{"version":3,"file":"static/js/709.112d2991.chunk.js","mappings":"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","sources":["schemas/validationYupSchemas.js","shared/components/Toast/errorToast.js","components/LoginForm/LoginForm.jsx","pages/Auth/Login.jsx","components/AuthForm/StepSwitcher/RegisterStep1.jsx","components/AuthForm/StepSwitcher/RegisterStep2.jsx","components/AuthForm/StepSwitcher/StepSwitcher.js","components/AuthForm/RegisterForm.jsx","pages/Auth/Register.jsx","../node_modules/@chakra-ui/layout/dist/chunk-B2MGPQRJ.mjs"],"sourcesContent":["import * as Yup from 'yup';\n\nconst regexPassword = /^\\S*$/\nconst regexPhoneNumber = /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/\nconst regexAdress = /^(?:(?:\\w+-\\w+)+|(?:\\w+)+),\\s(?:(?:\\w+-\\w+)+|(?:\\w+)+)$/\nconst regexEmail = /^[^-][a-zA-Z0-9_.-]{1,64}@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/\n\nexport const regesterYupSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email adress\").required(\"Required\").min(10).max(63).matches(regexEmail, \"Invalid email adress\"),\n    password: Yup.string().min(7, 'Must be 7 characters or more').max(32, 'Must be 32 characters or less').matches(regexPassword, 'Must not contain spaces').required(\"Required\"),\n    confirm: Yup.string().oneOf([Yup.ref('password'), null], \"Password must match\").required(\"Required\"),\n    name: Yup.string(),\n    address: Yup.string().matches(regexAdress, 'Must be in format City, Region'),\n    phone: Yup.string().max(13, 'Must be 12 numbers or less').matches(regexPhoneNumber, 'Mobile phone must include numbers in format +380xxxxxxxxx'),\n});\n\nexport const loginYupSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email adress\").required(\"Required\"),\n    password: Yup.string().min(7, 'Must be 7 characters or more').max(32, 'Must be 32 characters or less').matches(regexPassword, 'Must not contain spaces').required(\"Required\"),\n});","import { toast } from 'react-toastify';\n\nconst errorToast = (text) => {\n    return toast.error(text, {\n        position: \"top-right\",\n        autoClose: 5000,\n        hideProgressBar: true,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n        theme: \"light\",\n})\n}\n\nexport default errorToast;\n","import React from 'react'\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Heading, Box, Text } from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getIsRefreshing } from 'redux/auth/auth-selectors';\nimport { Button, FormikControl } from 'shared/components';\nimport { loginYupSchema } from 'schemas/validationYupSchemas';\nimport { login } from 'redux/auth/auth-operations';\nimport { errorToast } from 'shared/components/Toast';\n\n\n\nconst LoginForm = () => {\n    const isRefreshing = useSelector(getIsRefreshing);\n    const dispatch = useDispatch();\n    const[showPassword, setShowPassword] = useState(false);\n    \n    const handleShowPasswordClick =() => {\n        setShowPassword((prevState)=> !prevState)    \n    }\n\n    const initialValues = {\n        email: \"\",\n        password: \"\",\n    }\n\n    const handleSubmit = async (values, {resetForm}) => {\n        const authData = ({'email': values.email, 'password': values.password });\n        const data = await dispatch(login(authData));\n        resetForm();\n        if(!data.payload) {\n            errorToast(\"Please try again later\");\n        }             \n        data.error.message && data.error && errorToast(data.payload.message);                \n    }\n\n    return (\n        <Box width={{base:'280px', md:'608px', xl:'618px'}} px={{base:'0', md:'80px'}} pt={{base:'42px', md:'60px'}} pb={{base:'0', md:'40px', xl:'60px'}} borderRadius='40px' boxShadow={{base:'0', md:'7px 4px 14px rgba(0, 0, 0, 0.11)'}} bgColor={{base:'#FDF7F2', md:'white'}} mx='auto'>\n            <Heading as='h1' mb='40px' mt={{base:'0'}} textAlign='center' fontWeight='medium'>Login</Heading>\n            <Formik \n                initialValues={initialValues}\n                validationSchema={loginYupSchema}\n                onSubmit={handleSubmit}\n                isSubmitting\n                >\n                {formik => (\n                    <Box as={Form} position='relative' width={{base:'280px', md:'448px', xl:'458px'}} >\n                        <FormikControl \n                            control='input'\n                            type='email' \n                            name='email' \n                            id='lg-email' \n                            placeholder='Email'\n                        />\n                        <FormikControl\n                            control='input'\n                            type= 'password'\n                            name='password' \n                            id='lg-password' \n                            placeholder='Password'\n                            show={showPassword}\n                            handleClick={handleShowPasswordClick}\n                            mb='0' \n                        />\n                        <Button isDisabled={formik.isSubmitting} type='submit' controle='secondary' mb='40px' mt='40px' h={{base:'44px', xl:'48px'}} width={{base:'280px', md:'448px', xl:'458px'}} isLoading={isRefreshing} loadingText={\"Login\"}>Login</Button>\n                        <Box display='flex' justifyContent='center' >\n                            <Text \n                                fontFamily='body' \n                                fontSize='12px' \n                                fontWeight='normal' \n                                lineHeight='1.33' \n                                letterSpacing='0.04em' \n                                color='rgba(17, 17, 17, 0.6)'\n                                textAlign='center'\n                                >\n                                Don't have an account? \n                            </Text>\n                            <Box\n                                as='span'\n                                textDecoration='underline' \n                                fontFamily='body' \n                                fontSize='12px' \n                                fontWeight='normal' \n                                lineHeight='1.33' \n                                letterSpacing='0.04em' \n                                color='#3091EB;'\n                                textAlign='center'>\n                                <Link to='/register'>Register</Link>\n                            </Box>\n                        </Box>\n                    </Box>\n                )}\n            </Formik>\n        </Box>\n    )\n}\n\nexport default LoginForm\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport backgroundMobile from '../../media/bg-auth-mobile.png';\nimport backgroundTablet from '../../media/bg-auth-tablet.png';\nimport backgroundLaptop from '../../media/bg-auth-laptop.png';\nimport LoginForm from 'components/LoginForm/LoginForm';\n\nconst Login = () => {\n  return (\n    <Box as='main' bgImage={{base:backgroundMobile, md:backgroundTablet, xl:backgroundLaptop }} bgPosition='bottom' bgSize='contain' bgRepeat='no-repeat' bgColor='#FDF7F2' h='100vh' pt={{ md:'169px', xl:'46px'}}>\n      <LoginForm />\n    </Box>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { useState } from 'react';\nimport FormikControl from 'shared/components/FormikControl/FormikControl';\n\n\nconst RegisterStep1 = () => {\n    const[showPassword, setShowPassword] = useState(false);\n    const[showConfirmPassword, setShowConfirmPassword] = useState(false);\n    const handleClick =(name) => {\n        name === 'password' ? setShowPassword((prevState)=> !prevState) : setShowConfirmPassword((prevState)=> !prevState);    \n    }\n    return (\n        <>\n            <FormikControl \n                control='input'\n                type='email' \n                name='email' \n                id='reg-email' \n                placeholder='Email'\n                />\n            <FormikControl\n                control='input'\n                type= 'password'\n                handleClick={()=>handleClick('password')}\n                show = {showPassword}\n                name='password' \n                id='reg-password' \n                placeholder='Password'\n                />\n            <FormikControl \n                control='input'\n                type= 'password'\n                handleClick={handleClick}\n                show = {showConfirmPassword} \n                name='confirm' \n                id='reg-confirm-password' \n                placeholder='Confirm Password'\n                mb='0' \n                />\n        </>                   \n    )\n}\n\nexport default RegisterStep1;","import React from 'react';\nimport FormikControl from 'shared/components/FormikControl/FormikControl';\nimport { Button } from 'shared/components';\nimport { useSelector } from 'react-redux';\nimport { getIsRefreshing } from 'redux/auth/auth-selectors';\n\n\nconst RegisterStep2 = ({handleBackClick, isDisabled}) => {\n    const isRefreshing = useSelector(getIsRefreshing);\n\n    return (\n        <>                            \n            <FormikControl \n                control='input'\n                type='text' \n                name='name' \n                id='reg-name' \n                placeholder='Name'\n                />\n            <FormikControl \n                control='input'\n                type='text' \n                name='address' \n                id='address' \n                placeholder='City, region'\n                />\n            <FormikControl \n                control='input'\n                type='tel' \n                name='phone' \n                id='reg-phone' \n                placeholder='Mobile phone'\n                mb='0' />\n            <Button \n                controle='secondary' \n                mb='16px' \n                mt='40px' \n                type='submit' \n                isDisabled={isDisabled} \n                isLoading={isRefreshing} \n                loadingText={\"Register\"}\n            >\n                Register\n            </Button>\n            <Button \n                mb='40px' \n                onClick={handleBackClick} \n                isDisabled={isDisabled} \n            >\n                Back\n            </Button>\n        </>\n    )\n}\n\nexport default RegisterStep2;","import React from 'react';\nimport RegisterStep1 from './RegisterStep1';\nimport RegisterStep2 from './RegisterStep2';\n\n    const StepSwitcher = ({step, ...rest}) =>{\n        switch (step) {\n            case 'step1':\n                return <RegisterStep1 {...rest}/>\n            case 'step2':\n                return <RegisterStep2 {...rest}/>\n            default: return null\n        }\n    }\n\nexport default StepSwitcher;","import React from 'react';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Heading, Box, Text } from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Button } from 'shared/components';\nimport StepSwitcher from 'components/AuthForm/StepSwitcher/StepSwitcher';\nimport { regesterYupSchema } from 'schemas/validationYupSchemas';\nimport { login, register } from 'redux/auth/auth-operations';\nimport { errorToast } from 'shared/components/Toast';\n\n\nconst RegisterForm = () => {\n    const [step, setStep] = useState('step1');\n    const dispatch = useDispatch();\n\n    const initialValues = {\n        email: \"\",\n        password: \"\",\n        confirm: \"\",\n        name:\"\",\n        address:\"\",\n        phone:\"\"\n    }\n  \n    const onSubmit = async (values, {resetForm}) => {\n        const registerData = ({'email': values.email, 'password': values.password, 'name': values.name, 'address': values.address, 'phone': values.phone });\n        const data = await dispatch(register(registerData));\n        \n        if(data.type === \"auth/register/fulfilled\") {\n            dispatch(login({'email': values.email, 'password': values.password}));\n            resetForm();            \n        }\n        if(!data.payload) {\n            errorToast(\"Please try again later\");\n        }\n        data.error && errorToast(data.payload.message);                \n    }\n    \n    const handleBackClick = () => {\n        setStep('step1')\n    }\n\n    return (\n        <Box width={{base:'280px', md:'608px', xl:'618px'}} px={{base:'0', md:'80px'}} pt={{base:'42px', md:'60px'}} pb={{base:'0', md:'40px', xl:'60px'}} borderRadius='40px' boxShadow={{base:'0', md:'7px 4px 14px rgba(0, 0, 0, 0.11)'}} bgColor={{base:'#FDF7F2', md:'white'}} mx='auto'>\n            <Heading as='h1' mb='40px' mt={{base:'0'}} textAlign='center' fontWeight='medium'>Registration</Heading>\n            <Formik \n            initialValues={initialValues}\n            validationSchema={regesterYupSchema}\n            onSubmit={onSubmit}\n            >\n                {formik => (\n                <Box as={Form} position='relative' width={{base:'280px', md:'448px', xl:'458px'}} >\n                    <StepSwitcher step={step} isDisabled={formik.isSubmitting} handleBackClick={handleBackClick}/>\n                    {step === 'step1' && <Button  controle='secondary' mb='40px' mt='40px' h={{base:'44px', xl:'48px'}} width={{base:'280px', md:'448px', xl:'458px'}} onClick={async()=>{Object.keys(await formik.validateForm()).length === 0 ? setStep('step2') : formik.submitForm()}}>Next</Button> }\n                    <Box display='flex' justifyContent='center' >\n                        <Text \n                        fontFamily='body' \n                        fontSize='12px' \n                        fontWeight='normal' \n                        lineHeight='1.33' \n                        letterSpacing='0.04em' \n                        color='rgba(17, 17, 17, 0.6)'\n                        textAlign='center'\n                        >\n                            Already have an account? \n                        </Text>\n                        <Box\n                        as='span'\n                        textDecoration='underline' \n                        fontFamily='body' \n                        fontSize='12px' \n                        fontWeight='normal' \n                        lineHeight='1.33' \n                        letterSpacing='0.04em' \n                        color='#3091EB;'\n                        textAlign='center'>\n                            <Link to='/login'>Login</Link>\n                        </Box>\n                    </Box>\n                </Box>\n                )}\n            </Formik>\n        </Box>\n    )\n};\n\nexport default RegisterForm;","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport RegisterForm from 'components/AuthForm/RegisterForm';\nimport backgroundMobile from '../../media/bg-auth-mobile.png';\nimport backgroundTablet from '../../media/bg-auth-tablet.png';\nimport backgroundLaptop from '../../media/bg-auth-laptop.png';\n\n\n\nconst Register = () => {\n      \n  return (\n    <Box as='main' bgImage={{base:backgroundMobile, md:backgroundTablet, xl:backgroundLaptop }} bgPosition='bottom' bgSize='contain' bgRepeat='no-repeat' bgColor='#FDF7F2' h='100vh' pt={{ md:'169px', xl:'46px'}}>\n        <RegisterForm />\n    </Box>\n  )\n};\n\nexport default Register;\n","// src/heading.tsx\nimport {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  useStyleConfig\n} from \"@chakra-ui/system\";\nimport { cx } from \"@chakra-ui/shared-utils\";\nimport { jsx } from \"react/jsx-runtime\";\nvar Heading = forwardRef(function Heading2(props, ref) {\n  const styles = useStyleConfig(\"Heading\", props);\n  const { className, ...rest } = omitThemingProps(props);\n  return /* @__PURE__ */ jsx(\n    chakra.h2,\n    {\n      ref,\n      className: cx(\"chakra-heading\", props.className),\n      ...rest,\n      __css: styles\n    }\n  );\n});\nHeading.displayName = \"Heading\";\n\nexport {\n  Heading\n};\n"],"names":["regexPassword","regesterYupSchema","Yup","email","required","min","max","matches","password","confirm","oneOf","name","address","phone","loginYupSchema","text","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","theme","isRefreshing","useSelector","getIsRefreshing","dispatch","useDispatch","useState","showPassword","setShowPassword","handleShowPasswordClick","prevState","handleSubmit","values","resetForm","authData","login","data","payload","errorToast","error","message","width","base","md","xl","px","pt","pb","borderRadius","boxShadow","bgColor","mx","as","mb","mt","textAlign","fontWeight","initialValues","validationSchema","onSubmit","isSubmitting","formik","Form","control","type","id","placeholder","show","handleClick","isDisabled","controle","h","isLoading","loadingText","display","justifyContent","fontFamily","fontSize","lineHeight","letterSpacing","color","textDecoration","to","bgImage","backgroundMobile","backgroundTablet","backgroundLaptop","bgPosition","bgSize","bgRepeat","showConfirmPassword","setShowConfirmPassword","FormikControl","handleBackClick","onClick","step","rest","setStep","registerData","register","Object","validateForm","keys","length","submitForm","Heading","forwardRef","props","ref","styles","useStyleConfig","omitThemingProps","className","jsx","chakra","cx","__css","displayName"],"sourceRoot":""}