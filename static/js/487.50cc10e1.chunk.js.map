{"version":3,"file":"static/js/487.50cc10e1.chunk.js","mappings":"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","sources":["schemas/validationYupSchemas.js","components/LoginForm/LoginForm.jsx","pages/Auth/Login.jsx","components/AuthForm/StepSwitcher/RegisterStep1.jsx","components/AuthForm/StepSwitcher/RegisterStep2.jsx","components/AuthForm/StepSwitcher/StepSwitcher.js","components/AuthForm/RegisterForm.jsx","pages/Auth/Register.jsx","components/ResetForm/ResetForm.jsx","pages/Auth/Reset.jsx","components/ResetPasswordForm/ResetPasswordForm.jsx","pages/Auth/ResetPassword.jsx"],"sourcesContent":["import * as Yup from 'yup';\n\nconst regexPassword = /^\\S*$/\nconst regexPhoneNumber = /^\\+380\\d{3}\\d{2}\\d{2}\\d{2}$/\nconst regexAdress = /^(?:(?:\\w+-\\w+)+|(?:\\w+)+),\\s(?:(?:\\w+-\\w+)+|(?:\\w+)+)$/\nconst regexEmail = /^[^-][a-zA-Z0-9_.-]{1,64}@[a-zA-Z_]+?\\.[a-zA-Z]{2,3}$/\nconst regexName = /^([a-zA-Zа-яА-ЯёЁ]+)$/\n\nexport const regesterYupSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email adress\").required(\"Required\").min(10).max(63).matches(regexEmail, \"Invalid email adress\"),\n    password: Yup.string().min(7, 'Must be 7 characters or more').max(32, 'Must be 32 characters or less').matches(regexPassword, 'Must not contain spaces').required(\"Required\"),\n    confirm: Yup.string().oneOf([Yup.ref('password'), null], \"Password must match\").required(\"Required\"),\n    name: Yup.string().matches(regexName, 'Name must contain only letters'),\n    address: Yup.string().matches(regexAdress, 'Must be in format City, Region'),\n    phone: Yup.string().max(13, 'Must be 12 numbers or less').matches(regexPhoneNumber, 'Mobile phone must include numbers in format +380xxxxxxxxx'),\n});\n\nexport const loginYupSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email adress\").required(\"Required\"),\n    password: Yup.string().min(7, 'Must be 7 characters or more').max(32, 'Must be 32 characters or less').matches(regexPassword, 'Must not contain spaces').required(\"Required\"),\n});\n\nexport const resetYupSchema = Yup.object({\n    email: Yup.string().email(\"Invalid email adress\").required(\"Required\"),\n});\n\nexport const resetPasswordYupSchema = Yup.object({\n    password: Yup.string().min(7, 'Must be 7 characters or more').max(32, 'Must be 32 characters or less').matches(regexPassword, 'Must not contain spaces').required(\"Required\"),\n    passwordConfirmation: Yup.string()\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\n});\n","import React from 'react';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Heading, Box, Text } from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { useSelector } from 'react-redux';\nimport { getIsRefreshing } from 'redux/auth/auth-selectors';\nimport { Button, FormikControl } from 'shared/components';\nimport { loginYupSchema } from 'schemas/validationYupSchemas';\nimport { login } from 'redux/auth/auth-operations';\nimport { errorToast } from 'shared/components/Toast';\n\nconst LoginForm = () => {\n  const isRefreshing = useSelector(getIsRefreshing);\n  const dispatch = useDispatch();\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleShowPasswordClick = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const initialValues = {\n    email: '',\n    password: '',\n  };\n\n  const handleSubmit = async (values, { resetForm }) => {\n    const authData = { email: values.email, password: values.password };\n    const data = await dispatch(login(authData));\n    if (data.type === 'auth/login/fulfilled') {\n      resetForm();\n    }\n\n    if (!data.payload) {\n      errorToast('Please try again later');\n    }\n    data.error.message && data.error && errorToast(data.payload.message);\n  };\n\n  return (\n    <Box\n      width={{ base: '280px', md: '608px', xl: '618px' }}\n      px={{ base: '0', md: '20' }}\n      pt={{ base: '22px', md: '60px' }}\n      pb={{ base: '0', md: '10', xl: '60px' }}\n      borderRadius=\"40px\"\n      boxShadow={{ base: '0', md: '7px 4px 14px rgba(0, 0, 0, 0.11)' }}\n      bgColor={{ base: 'accent.background', md: 'white' }}\n      mx=\"auto\"\n    >\n      <Heading\n        as=\"h1\"\n        mb=\"10\"\n        mt={{ base: '0' }}\n        textAlign=\"center\"\n        fontWeight=\"medium\"\n      >\n        Login\n      </Heading>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={loginYupSchema}\n        onSubmit={handleSubmit}\n        isSubmitting\n      >\n        {formik => (\n          <Box\n            as={Form}\n            position=\"relative\"\n            width={{ base: '280px', md: '448px', xl: '458px' }}\n          >\n            <FormikControl\n              control=\"input\"\n              type=\"email\"\n              name=\"email\"\n              id=\"lg-email\"\n              placeholder=\"Email\"\n            />\n            <FormikControl\n              control=\"input\"\n              type=\"password\"\n              name=\"password\"\n              id=\"lg-password\"\n              placeholder=\"Password\"\n              show={showPassword}\n              handleClick={handleShowPasswordClick}\n              mb=\"40px\"\n            />\n            <Button\n              isDisabled={formik.isSubmitting}\n              type=\"submit\"\n              controle=\"secondary\"\n              mb=\"40px\"\n              h={{ base: '44px', xl: '48px' }}\n              width={{ base: '280px', md: '448px', xl: '458px' }}\n              isLoading={isRefreshing}\n              loadingText={'Login'}\n              aria-label=\"login\"\n            >\n              Login\n            </Button>\n            <Box display=\"flex\" justifyContent=\"center\" mb={2}>\n              <Text\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"accent.grey\"\n                textAlign=\"center\"\n              >\n                Don't have an account?\n              </Text>\n              <Box\n                as=\"span\"\n                textDecoration=\"underline\"\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"#3091EB;\"\n                textAlign=\"center\"\n              >\n                <Link to=\"/register\">Register</Link>\n              </Box>\n            </Box>\n            <Box display=\"flex\" justifyContent=\"center\">\n              <Text\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"accent.grey\"\n                textAlign=\"center\"\n              >\n                Forgot your password?\n              </Text>\n              <Box\n                as=\"span\"\n                textDecoration=\"underline\"\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"#3091EB;\"\n                textAlign=\"center\"\n              >\n                <Link to=\"/recovery\">Reset</Link>\n              </Box>\n            </Box>\n          </Box>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport { authBackgroundMobile, authBackgroundLaptop, authBackgroundTablet } from 'media';\nimport LoginForm from 'components/LoginForm/LoginForm';\n\n\nconst Login = () => {\n    \n  return (\n    <Box as='main' bgImage={{base:authBackgroundMobile, md:authBackgroundTablet, xl:authBackgroundLaptop }} bgPosition='bottom' bgSize='contain' bgRepeat='no-repeat' bgColor='accent.background' h={{base:\"calc(100vh - 74px)\", md:\"calc(100vh - 96px)\", xl:\"calc(100vh - 88px)\"}} pt={{ md:'180px', xl:'60px'}}>\n      <LoginForm />\n    </Box>\n  );\n};\n\nexport default Login;\n","import React from 'react';\nimport { useState } from 'react';\nimport FormikControl from 'shared/components/FormikControl/FormikControl';\n\n\nconst RegisterStep1 = () => {\n    const[showPassword, setShowPassword] = useState(false);\n    const[showConfirmPassword, setShowConfirmPassword] = useState(false);\n    const handleClick =(name) => {\n        name === 'password' ? setShowPassword((prevState)=> !prevState) : setShowConfirmPassword((prevState)=> !prevState);    \n    }\n    return (\n        <>\n            <FormikControl \n                control='input'\n                type='email' \n                name='email' \n                id='reg-email' \n                placeholder='Email'\n                />\n            <FormikControl\n                control='input'\n                type= 'password'\n                handleClick={()=>handleClick('password')}\n                show = {showPassword}\n                name='password' \n                id='reg-password' \n                placeholder='Password'\n                />\n            <FormikControl \n                control='input'\n                type= 'password'\n                handleClick={handleClick}\n                show = {showConfirmPassword} \n                name='confirm' \n                id='reg-confirm-password' \n                placeholder='Confirm Password'\n                mb='40px' \n                />\n        </>                   \n    )\n}\n\nexport default RegisterStep1;","import React from 'react';\nimport FormikControl from 'shared/components/FormikControl/FormikControl';\nimport { Button } from 'shared/components';\nimport { useSelector } from 'react-redux';\nimport { getIsRefreshing } from 'redux/auth/auth-selectors';\n\nconst RegisterStep2 = ({ handleBackClick, isDisabled }) => {\n  const isRefreshing = useSelector(getIsRefreshing);\n\n  return (\n    <>\n      <FormikControl\n        control=\"input\"\n        type=\"text\"\n        name=\"name\"\n        id=\"reg-name\"\n        placeholder=\"Name\"\n      />\n      <FormikControl\n        control=\"input\"\n        type=\"text\"\n        name=\"address\"\n        id=\"address\"\n        placeholder=\"City, region\"\n      />\n      <FormikControl\n        control=\"input\"\n        type=\"tel\"\n        name=\"phone\"\n        id=\"reg-phone\"\n        placeholder=\"Mobile phone\"\n        mb=\"40px\"\n      />\n      <Button\n        controle=\"secondary\"\n        mb=\"4\"\n        type=\"submit\"\n        isDisabled={isDisabled}\n        isLoading={isRefreshing}\n        loadingText={'Register'}\n        aria-label=\"registration\"\n      >\n        Register\n      </Button>\n      <Button\n        mb=\"10\"\n        onClick={handleBackClick}\n        isDisabled={isDisabled}\n        aria-label=\"back\"\n      >\n        Back\n      </Button>\n    </>\n  );\n};\n\nexport default RegisterStep2;\n","import React from 'react';\nimport RegisterStep1 from './RegisterStep1';\nimport RegisterStep2 from './RegisterStep2';\n\n    const StepSwitcher = ({step, ...rest}) =>{\n        switch (step) {\n            case 'step1':\n                return <RegisterStep1 {...rest}/>\n            case 'step2':\n                return <RegisterStep2 {...rest}/>\n            default: return null\n        }\n    }\n\nexport default StepSwitcher;","import React from 'react';\nimport { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Heading, Box, Text } from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { Button } from 'shared/components';\nimport StepSwitcher from 'components/AuthForm/StepSwitcher/StepSwitcher';\nimport { regesterYupSchema } from 'schemas/validationYupSchemas';\nimport { login, register } from 'redux/auth/auth-operations';\nimport { errorToast } from 'shared/components/Toast';\n\nconst RegisterForm = () => {\n  const [step, setStep] = useState('step1');\n  const dispatch = useDispatch();\n\n  const initialValues = {\n    email: '',\n    password: '',\n    confirm: '',\n    name: '',\n    address: '',\n    phone: '',\n  };\n\n  const onSubmit = async (values, { resetForm }) => {\n    const registerData = {\n      email: values.email,\n      password: values.password,\n      name: values.name,\n      address: values.address,\n      phone: values.phone,\n    };\n    const data = await dispatch(register(registerData));\n\n    if (data.type === 'auth/register/fulfilled') {\n      dispatch(login({ email: values.email, password: values.password }));\n      resetForm();\n    }\n    if (!data.payload) {\n      errorToast('Please try again later');\n    }\n    data.error && errorToast(data.payload.message);\n  };\n\n  const handleBackClick = () => {\n    setStep('step1');\n  };\n\n  return (\n    <Box\n      width={{ base: '280px', md: '608px', xl: '618px' }}\n      px={{ base: '0', md: '20' }}\n      pt={{ base: '22px', md: '60px' }}\n      pb={{ base: '0', md: '10', xl: '60px' }}\n      borderRadius=\"40px\"\n      boxShadow={{ base: '0', md: '7px 4px 14px rgba(0, 0, 0, 0.11)' }}\n      bgColor={{ base: 'accent.background', md: 'white' }}\n      mx=\"auto\"\n    >\n      <Heading\n        as=\"h1\"\n        mb=\"10\"\n        mt={{ base: '0' }}\n        textAlign=\"center\"\n        fontWeight=\"medium\"\n      >\n        Registration\n      </Heading>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={regesterYupSchema}\n        onSubmit={onSubmit}\n      >\n        {formik => (\n          <Box\n            as={Form}\n            position=\"relative\"\n            width={{ base: '280px', md: '448px', xl: '458px' }}\n          >\n            <StepSwitcher\n              step={step}\n              isDisabled={formik.isSubmitting}\n              handleBackClick={handleBackClick}\n            />\n            {step === 'step1' && (\n              <Button\n                aria-label=\"next\"\n                controle=\"secondary\"\n                mb=\"10\"\n                h={{ base: '44px', xl: '12' }}\n                width={{ base: '280px', md: '448px', xl: '458px' }}\n                onClick={async () => {\n                  Object.keys(await formik.validateForm()).length === 0\n                    ? setStep('step2')\n                    : formik.submitForm();\n                }}\n              >\n                Next\n              </Button>\n            )}\n            <Box display=\"flex\" justifyContent=\"center\">\n              <Text\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"accent.grey\"\n                textAlign=\"center\"\n              >\n                Already have an account?\n              </Text>\n              <Box\n                as=\"span\"\n                textDecoration=\"underline\"\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"#3091EB;\"\n                textAlign=\"center\"\n              >\n                <Link to=\"/login\">Login</Link>\n              </Box>\n            </Box>\n          </Box>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default RegisterForm;\n","import React from 'react';\nimport { Box } from '@chakra-ui/react';\nimport RegisterForm from 'components/AuthForm/RegisterForm';\nimport { authBackgroundMobile, authBackgroundLaptop, authBackgroundTablet } from 'media';\n\n\nconst Register = () => {\n      \n  return (\n    <Box as='main' bgImage={{base:authBackgroundMobile, md:authBackgroundTablet, xl:authBackgroundLaptop }} bgPosition='bottom' bgSize='contain' bgRepeat='no-repeat' bgColor='accent.background' h={{base:\"calc(100vh - 74px)\", md:\"calc(100vh - 96px)\", xl:\"calc(100vh - 88px)\"}} pt={{ md:'145px', xl:'26px'}}>\n        <RegisterForm />\n    </Box>\n  )\n};\n\nexport default Register;\n","import { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Heading, Box, Text } from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport { reset } from 'services/api/auth';\nimport { Button, FormikControl } from 'shared/components';\nimport { resetYupSchema } from 'schemas/validationYupSchemas';\nimport { errorToast, successToast } from 'shared/components/Toast';\n\nconst ResetForm = () => {\n  const [isLoading, setIsLoading] = useState(false);\n\n  const initialValues = {\n    email: '',\n  };\n\n  const handleSubmit = async ({ email }, { resetForm }) => {\n    const resetData = { email };\n    try {\n      setIsLoading(true);\n      await reset(resetData);\n      successToast('We have sent you a letter, please check your email');\n      resetForm();\n    } catch ({ response }) {\n      errorToast(response.data.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      width={{ base: '280px', md: '608px', xl: '618px' }}\n      px={{ base: '0', md: '20' }}\n      pt={{ base: '22px', md: '60px' }}\n      pb={{ base: '0', md: '10', xl: '60px' }}\n      borderRadius=\"40px\"\n      boxShadow={{ base: '0', md: '7px 4px 14px rgba(0, 0, 0, 0.11)' }}\n      bgColor={{ base: 'accent.background', md: 'white' }}\n      mx=\"auto\"\n    >\n      <Heading\n        as=\"h1\"\n        mb=\"10\"\n        mt={{ base: '0' }}\n        textAlign=\"center\"\n        fontWeight=\"medium\"\n      >\n        Reset password\n      </Heading>\n      <Text mb={6}>\n        Please enter the email you use to login. We will send you an email to\n        reset your password.\n      </Text>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={resetYupSchema}\n        onSubmit={handleSubmit}\n        isSubmitting\n      >\n        {formik => (\n          <Box\n            as={Form}\n            position=\"relative\"\n            width={{ base: '280px', md: '448px', xl: '458px' }}\n          >\n            <FormikControl\n              control=\"input\"\n              type=\"email\"\n              name=\"email\"\n              id=\"reset-email\"\n              placeholder=\"Email\"\n              mb=\"40px\"\n            />\n            <Button\n              isDisabled={formik.isSubmitting}\n              type=\"submit\"\n              controle=\"secondary\"\n              mb=\"40px\"\n              h={{ base: '44px', xl: '48px' }}\n              width={{ base: '280px', md: '448px', xl: '458px' }}\n              isLoading={isLoading}\n              loadingText={'Send'}\n              aria-label=\"Request password reset\"\n            >\n              Request password reset\n            </Button>\n            <Box display=\"flex\" justifyContent=\"center\">\n              <Box\n                as=\"span\"\n                textDecoration=\"underline\"\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"#3091EB;\"\n                textAlign=\"center\"\n              >\n                <Link to=\"/login\">Back to login</Link>\n              </Box>\n            </Box>\n          </Box>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default ResetForm;\n","import { Box } from '@chakra-ui/react';\nimport { authBackgroundMobile, authBackgroundLaptop, authBackgroundTablet } from 'media';\nimport ResetForm from 'components/ResetForm/ResetForm';\n\n\nconst Reset = () => {\n    \n  return (\n    <Box as='main' bgImage={{base:authBackgroundMobile, md:authBackgroundTablet, xl:authBackgroundLaptop }} bgPosition='bottom' bgSize='contain' bgRepeat='no-repeat' bgColor='accent.background' h={{base:\"calc(100vh - 74px)\", md:\"calc(100vh - 96px)\", xl:\"calc(100vh - 88px)\"}} pt={{ md:'180px', xl:'60px'}}>\n      <ResetForm />\n    </Box>\n  );\n};\n\nexport default Reset;","import { useState } from 'react';\nimport { Link, useNavigate, useParams } from 'react-router-dom';\nimport { Heading, Box } from '@chakra-ui/react';\nimport { Formik, Form } from 'formik';\nimport { resetPassword } from 'services/api/auth';\nimport { Button, FormikControl } from 'shared/components';\nimport { resetPasswordYupSchema } from 'schemas/validationYupSchemas';\nimport { errorToast, successToast } from 'shared/components/Toast';\n\nconst ResetPasswordForm = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const { recoveryToken } = useParams();\n  const navigate = useNavigate()\n\n  const [showPassword, setShowPassword] = useState(false);\n  const handleShowPasswordClick = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  const initialValues = {\n    password: '',\n    passwordConfirmation: '',\n  };\n\n  const handleSubmit = async (\n    { password, passwordConfirmation },\n    { resetForm }\n  ) => {\n    const resetData = { password, repeat_password: passwordConfirmation };\n\n    try {\n      setIsLoading(true);\n      await resetPassword(recoveryToken, resetData);\n      resetForm();\n      successToast('Password was changed successfull');\n      navigate('/login')\n    } catch ({ response }) {\n      errorToast(response.data.message);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <Box\n      width={{ base: '280px', md: '608px', xl: '618px' }}\n      px={{ base: '0', md: '20' }}\n      pt={{ base: '22px', md: '60px' }}\n      pb={{ base: '0', md: '10', xl: '60px' }}\n      borderRadius=\"40px\"\n      boxShadow={{ base: '0', md: '7px 4px 14px rgba(0, 0, 0, 0.11)' }}\n      bgColor={{ base: 'accent.background', md: 'white' }}\n      mx=\"auto\"\n    >\n      <Heading\n        as=\"h1\"\n        mb=\"10\"\n        mt={{ base: '0' }}\n        textAlign=\"center\"\n        fontWeight=\"medium\"\n      >\n        New password\n      </Heading>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={resetPasswordYupSchema}\n        onSubmit={handleSubmit}\n        isSubmitting\n      >\n        {formik => (\n          <Box\n            as={Form}\n            position=\"relative\"\n            width={{ base: '280px', md: '448px', xl: '458px' }}\n          >\n            <FormikControl\n              control=\"input\"\n              type=\"password\"\n              name=\"password\"\n              id=\"password\"\n              label=\"Enter password\"\n              placeholder=\"Password\"\n              show={showPassword}\n              handleClick={handleShowPasswordClick}\n              mb={'32px'}\n            />\n            <FormikControl\n              control=\"input\"\n              type=\"password\"\n              name=\"passwordConfirmation\"\n              id=\"confirm-password\"\n              label=\"Confirm password\"\n              placeholder=\"Password\"\n              show={showPassword}\n              handleClick={handleShowPasswordClick}\n              mb=\"40px\"\n            />\n            <Button\n              isDisabled={formik.isSubmitting}\n              type=\"submit\"\n              controle=\"secondary\"\n              mb=\"40px\"\n              h={{ base: '44px', xl: '48px' }}\n              width={{ base: '280px', md: '448px', xl: '458px' }}\n              isLoading={isLoading}\n              loadingText={'Update'}\n              aria-label=\"Update your password\"\n            >\n              Update your password\n            </Button>\n            <Box display=\"flex\" justifyContent=\"center\">\n              <Box\n                as=\"span\"\n                textDecoration=\"underline\"\n                fontFamily=\"body\"\n                fontSize=\"xs\"\n                fontWeight=\"normal\"\n                lineHeight=\"1.33\"\n                letterSpacing=\"0.04em\"\n                color=\"#3091EB;\"\n                textAlign=\"center\"\n              >\n                <Link to=\"/login\">Back to login</Link>\n              </Box>\n            </Box>\n          </Box>\n        )}\n      </Formik>\n    </Box>\n  );\n};\n\nexport default ResetPasswordForm;\n","import { Box } from '@chakra-ui/react';\nimport { authBackgroundMobile, authBackgroundLaptop, authBackgroundTablet } from 'media';\nimport ResetPasswordForm from 'components/ResetPasswordForm/ResetPasswordForm';\n\n\nconst ResetPassword = () => {\n    \n  return (\n    <Box as='main' bgImage={{base:authBackgroundMobile, md:authBackgroundTablet, xl:authBackgroundLaptop }} bgPosition='bottom' bgSize='contain' bgRepeat='no-repeat' bgColor='accent.background' h={{base:\"calc(100vh - 74px)\", md:\"calc(100vh - 96px)\", xl:\"calc(100vh - 88px)\"}} pt={{ md:'180px', xl:'60px'}}>\n      <ResetPasswordForm />\n    </Box>\n  );\n};\n\nexport default ResetPassword;"],"names":["regexPassword","regesterYupSchema","Yup","email","required","min","max","matches","password","confirm","oneOf","name","address","phone","loginYupSchema","resetYupSchema","resetPasswordYupSchema","passwordConfirmation","isRefreshing","useSelector","getIsRefreshing","dispatch","useDispatch","useState","showPassword","setShowPassword","handleShowPasswordClick","prevState","handleSubmit","values","resetForm","authData","login","data","type","payload","errorToast","error","message","width","base","md","xl","px","pt","pb","borderRadius","boxShadow","bgColor","mx","as","mb","mt","textAlign","fontWeight","initialValues","validationSchema","onSubmit","isSubmitting","formik","Form","position","control","id","placeholder","show","handleClick","isDisabled","controle","h","isLoading","loadingText","display","justifyContent","fontFamily","fontSize","lineHeight","letterSpacing","color","textDecoration","to","bgImage","authBackgroundMobile","authBackgroundTablet","authBackgroundLaptop","bgPosition","bgSize","bgRepeat","showConfirmPassword","setShowConfirmPassword","FormikControl","handleBackClick","onClick","step","rest","setStep","registerData","register","Object","validateForm","keys","length","submitForm","setIsLoading","resetData","reset","successToast","response","recoveryToken","useParams","navigate","useNavigate","repeat_password","resetPassword","label"],"sourceRoot":""}